// Chat moderation types for BigFootLive platform

export type MessageType = 'text' | 'emoji' | 'image' | 'link' | 'system';
export type UserRole = 'viewer' | 'subscriber' | 'moderator' | 'admin' | 'owner';
export type ModerationAction = 'delete' | 'timeout' | 'ban' | 'warn' | 'pin' | 'edit' | 'approve';
export type AlertSeverity = 'low' | 'medium' | 'high' | 'critical';
export type SentimentScore = 'positive' | 'neutral' | 'negative' | 'toxic';
export type UserStatus = 'active' | 'timeout' | 'banned' | 'warned' | 'shadowbanned';

// Chat message interface
export interface ChatMessage {
  id: string;
  eventId: string;
  userId: string;
  username: string;
  userRole: UserRole;
  avatar?: string;
  type: MessageType;
  content: string;
  timestamp: number;
  edited: boolean;
  editedAt?: number;
  deleted: boolean;
  deletedAt?: number;
  deletedBy?: string;
  pinned: boolean;
  pinnedBy?: string;
  reportCount: number;
  moderationFlags: string[];
  sentimentScore?: SentimentScore;
  toxicityLevel?: number; // 0-100
  isSpam?: boolean;
  containsLinks?: boolean;
  language?: string;
  replyTo?: string; // Message ID for threading
  reactions: { [emoji: string]: number };
}

// User profile for moderation
export interface ChatUser {
  id: string;
  username: string;
  displayName: string;
  avatar?: string;
  role: UserRole;
  status: UserStatus;
  joinedAt: number;
  lastActive: number;
  messageCount: number;
  violationCount: number;
  warningCount: number;
  timeoutCount: number;
  banCount: number;
  isAnonymous: boolean;
  trustLevel: number; // 0-100
  engagementScore: number; // 0-100
  moderationHistory: ModerationRecord[];
  permissions: {
    canChat: boolean;
    canReact: boolean;
    canSendLinks: boolean;
    canSendImages: boolean;
  };
}

// Moderation action record
export interface ModerationRecord {
  id: string;
  action: ModerationAction;
  reason: string;
  moderatorId: string;
  moderatorName: string;
  timestamp: number;
  duration?: number; // For timeouts (in seconds)
  messageId?: string;
  eventId: string;
  severity: AlertSeverity;
  notes?: string;
}

// Event chat summary
export interface EventChatSummary {
  eventId: string;
  eventTitle: string;
  status: 'active' | 'ended' | 'scheduled';
  participantCount: number;
  messageCount: number;
  messagesPerMinute: number;
  moderatorCount: number;
  pendingActions: number;
  alertCount: { [severity in AlertSeverity]: number };
  lastActivity: number;
  chatEnabled: boolean;
  slowMode: boolean;
  slowModeDelay: number; // seconds
  subscriberOnly: boolean;
  moderatedMode: boolean; // All messages need approval
  emotesOnly: boolean;
  linksDisabled: boolean;
}

// Moderation alert
export interface ModerationAlert {
  id: string;
  eventId: string;
  type: 'spam' | 'toxicity' | 'harassment' | 'violation' | 'system' | 'user_report';
  severity: AlertSeverity;
  title: string;
  message: string;
  timestamp: number;
  messageId?: string;
  userId?: string;
  resolved: boolean;
  resolvedBy?: string;
  resolvedAt?: number;
  autoGenerated: boolean;
  requiresAction: boolean;
  metadata: { [key: string]: any };
}

// Keyword filter
export interface KeywordFilter {
  id: string;
  keyword: string;
  action: 'delete' | 'flag' | 'warn' | 'timeout' | 'ban';
  severity: AlertSeverity;
  enabled: boolean;
  createdBy: string;
  createdAt: number;
  category: string; // 'profanity', 'spam', 'harassment', etc.
  regex: boolean;
  caseSensitive: boolean;
  wholeWord: boolean;
}

// Moderation settings
export interface ModerationSettings {
  eventId: string;
  autoModeration: {
    enabled: boolean;
    toxicityThreshold: number; // 0-100
    spamDetection: boolean;
    linkFiltering: boolean;
    duplicateMessageFiltering: boolean;
    rateLimit: {
      enabled: boolean;
      messagesPerMinute: number;
      timeoutDuration: number; // seconds
    };
  };
  keywordFilters: KeywordFilter[];
  userSettings: {
    requireAccountAge: number; // days
    requireEmailVerification: boolean;
    allowAnonymous: boolean;
    trustLevelRequired: number; // 0-100
  };
  chatFeatures: {
    allowImages: boolean;
    allowLinks: boolean;
    allowEmojis: boolean;
    allowReactions: boolean;
    messageHistory: number; // days to keep messages
  };
}

// Bulk moderation operation
export interface BulkModerationOperation {
  id: string;
  type: 'select_messages' | 'select_by_user' | 'select_by_keyword' | 'select_by_timerange';
  criteria: {
    messageIds?: string[];
    userId?: string;
    keyword?: string;
    startTime?: number;
    endTime?: number;
    eventId?: string;
  };
  action: ModerationAction;
  reason: string;
  moderatorId: string;
  timestamp: number;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  affectedCount: number;
  progress: number; // 0-100
  errors: string[];
}

// Chat analytics for moderation
export interface ChatAnalytics {
  eventId: string;
  timeRange: {
    start: number;
    end: number;
  };
  totalMessages: number;
  uniqueUsers: number;
  averageMessagesPerUser: number;
  peakMessagesPerMinute: number;
  sentimentDistribution: {
    positive: number;
    neutral: number;
    negative: number;
    toxic: number;
  };
  moderationStats: {
    totalActions: number;
    actionBreakdown: { [action in ModerationAction]: number };
    alertsGenerated: number;
    autoModerationAccuracy: number; // 0-100
  };
  topUsers: Array<{
    userId: string;
    username: string;
    messageCount: number;
    engagementScore: number;
  }>;
  flaggedContent: {
    totalFlagged: number;
    byCategory: { [category: string]: number };
    resolved: number;
    pending: number;
  };
}

// WebSocket events for chat moderation
export type ChatWebSocketEvent = 
  | { type: 'message_new', data: ChatMessage }
  | { type: 'message_deleted', data: { messageId: string, eventId: string } }
  | { type: 'message_edited', data: ChatMessage }
  | { type: 'user_joined', data: { userId: string, eventId: string, username: string } }
  | { type: 'user_left', data: { userId: string, eventId: string } }
  | { type: 'user_timeout', data: { userId: string, eventId: string, duration: number } }
  | { type: 'user_banned', data: { userId: string, eventId: string, permanent: boolean } }
  | { type: 'moderation_alert', data: ModerationAlert }
  | { type: 'chat_settings_updated', data: { eventId: string, settings: Partial<ModerationSettings> } }
  | { type: 'bulk_operation_update', data: BulkModerationOperation };

// Dashboard state
export interface ChatModerationDashboardState {
  // Active events being monitored
  activeEvents: EventChatSummary[];
  selectedEventId: string | null;
  
  // Multi-view mode
  multiView: boolean;
  multiViewEvents: string[];
  
  // Messages and users
  messages: { [eventId: string]: ChatMessage[] };
  users: { [userId: string]: ChatUser };
  
  // Moderation tools
  alerts: ModerationAlert[];
  pendingActions: BulkModerationOperation[];
  moderationHistory: ModerationRecord[];
  
  // Filters and search
  messageFilters: {
    severity: AlertSeverity[];
    sentiment: SentimentScore[];
    userRole: UserRole[];
    messageType: MessageType[];
    flagged: boolean;
    reported: boolean;
  };
  searchQuery: string;
  
  // UI state
  selectedMessages: Set<string>;
  showUserProfile: string | null;
  showModerationPanel: boolean;
  autoScroll: boolean;
  soundAlerts: boolean;
  
  // Real-time updates
  isConnected: boolean;
  lastUpdate: number;
}

// API responses
export interface ChatModerationResponse<T> {
  success: boolean;
  data: T;
  error?: string;
  timestamp: number;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
  hasNext: boolean;
  hasPrev: boolean;
}